diff --git forkSrcPrefix/group.tokens.inc forkDstPrefix/group.tokens.inc
index c53bdde49821e51c08434aaf5436b74070a59b9f..75d9ce0388aa6859d3968efe3ddf13bc41b97385 100644
--- forkSrcPrefix/group.tokens.inc
+++ forkDstPrefix/group.tokens.inc
@@ -10,6 +10,8 @@ use Drupal\Core\Language\LanguageInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\group\Entity\GroupInterface;
 use Drupal\group\Entity\GroupRelationshipInterface;
+use Drupal\group\Plugin\Group\Relation\GroupRelationTypeManagerInterface;
+use Drupal\group\Plugin\Group\Relation\GroupRelationTypeInterface;
 
 /**
  * Implements hook_token_info().
@@ -55,6 +57,11 @@ function group_token_info() {
     'description' => t('The URL of the group.'),
   ];
 
+  $tokens['group']['alias'] = [
+    'name' => t('Alias'),
+    'description' => t('The alias used by the parent group'),
+  ];
+
   $tokens['group']['edit-url'] = [
     'name' => t('Edit URL'),
     'description' => t("The URL of the group's edit page."),
@@ -123,6 +130,40 @@ function group_token_info() {
     'description' => t('A prettier way of labeling group relationship of the same relation type.'),
   ];
 
+  $tokens['group_content']['label'] = [
+    'name' => t('Group content entity label'),
+    'description' => t('The label of the entity object referenced in the group content.'),
+  ];
+
+  // Build per entity type chained tokens.
+  $plugin_manager = \Drupal::service('group_relation_type.manager');
+  assert($plugin_manager instanceof GroupRelationTypeManagerInterface);
+
+  $content_entity_types = [];
+  foreach ($plugin_manager->getDefinitions() as $plugin_id => $group_relation_type) {
+    assert($group_relation_type instanceof GroupRelationTypeInterface);
+    $entity_type_id = $group_relation_type->getEntityTypeId();
+    if (!isset($content_entity_types[$entity_type_id])) {
+      $entity_type_object = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
+      if ($entity_type_object) {
+        $content_entity_types[$entity_type_id] = $entity_type_object->getLabel();
+      }
+    }
+  }
+
+  foreach ($content_entity_types as $content_entity_type_id => $content_entity_type_label) {
+    $tokens['group_content'][$content_entity_type_id] = [
+      'type' => $content_entity_type_id,
+      'name' => t('Group content entity: @label', [
+        '@label' => $content_entity_type_label,
+      ]),
+      'description' => t('The @label (@type) entity object for the group content.', [
+        '@label' => $content_entity_type_label,
+        '@type' => $content_entity_type_id,
+      ]),
+    ];
+  }
+
   return ['types' => $types, 'tokens' => $tokens];
 }
 
@@ -176,6 +217,11 @@ function group_tokens($type, $tokens, array $data, array $options, BubbleableMet
           $replacements[$original] = $group->toUrl('canonical', $url_options)->toString();
           break;
 
+        case 'alias':
+          $group_alias = \Drupal::service('path.alias_manager')->getAliasByPath('/group/' . $group->id());
+          $replacements[$original] = $group_alias;
+          break;
+
         case 'edit-url':
           $replacements[$original] = $group->toUrl('edit-form', $url_options)->toString();
           break;
@@ -217,6 +263,8 @@ function group_tokens($type, $tokens, array $data, array $options, BubbleableMet
   elseif ($type == 'group_content' && !empty($data[$type])) {
     $group_relationship = $data['group_content'];
     assert($group_relationship instanceof GroupRelationshipInterface);
+    $content_entity = $group_relationship->getEntity();
+    $content_entity_type = $group_relationship->getEntityTypeId();
 
     foreach ($tokens as $name => $original) {
       switch ($name) {
@@ -258,6 +306,19 @@ function group_tokens($type, $tokens, array $data, array $options, BubbleableMet
           $bubbleable_metadata->addCacheableDependency($date_format);
           $replacements[$original] = \Drupal::service('date.formatter')->format($group_relationship->getChangedTime(), 'medium', '', NULL, $langcode);
           break;
+
+        case 'label':
+          $replacements[$original] = $group_relationship->label();
+          break;
+
+        case $content_entity_type:
+          // Entity chained references.
+          // Add cache dependency.
+          $bubbleable_metadata->addCacheableDependency($content_entity);
+
+          // Provide a string for tokens that are not chained.
+          $replacements[$original] = $content_entity->label();
+          break;
       }
 
       // Actual chaining of tokens handled below.
@@ -272,6 +333,17 @@ function group_tokens($type, $tokens, array $data, array $options, BubbleableMet
       if ($changed_tokens = $token_service->findWithPrefix($tokens, 'changed')) {
         $replacements += $token_service->generate('date', $changed_tokens, ['date' => $group_relationship->getChangedTime()], $options, $bubbleable_metadata);
       }
+
+      // Content entity chaining of tokens.
+      // Example: "group_content:node:field_cool_value".
+      if ($content_entity && $content_entity_type) {
+        if ($content_entity_tokens = $token_service->findWithPrefix($tokens, $content_entity_type)) {
+          $bubbleable_metadata->addCacheableDependency($content_entity);
+          $replacements += $token_service->generate($content_entity_type, $content_entity_tokens, [
+            $content_entity_type => $content_entity,
+          ], $options, $bubbleable_metadata);
+        }
+      }
     }
   }
 
